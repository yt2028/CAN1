
CAN1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f48  08002f48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f50  08002f50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002f64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002f64  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008410  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001806  00000000  00000000  0002844c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00029c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cef  00000000  00000000  0002aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e66  00000000  00000000  0004b77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b6a  00000000  00000000  000545e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b14f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d24  00000000  00000000  0011b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f20 	.word	0x08002f20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f20 	.word	0x08002f20

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN Communication */
int CANSPI_Initialize(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Initialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	70fb      	strb	r3, [r7, #3]

  /* Initialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Standard Filter
 8000532:	2300      	movs	r3, #0
 8000534:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 8000542:	2308      	movs	r3, #8
 8000544:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000582:	2308      	movs	r3, #8
 8000584:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	72fb      	strb	r3, [r7, #11]

  /* Initialize MCP2515, Check SPI Communication Status */
  if(!MCP2515_Initialize())
 800058e:	f000 fa13 	bl	80009b8 <MCP2515_Initialize>
 8000592:	4603      	mov	r3, r0
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <CANSPI_Initialize+0x9c>
    return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e060      	b.n	8000666 <CANSPI_Initialize+0x15e>

  /* Set to Configuration mode */
  if(!MCP2515_SetConfigMode())
 80005a4:	f000 fa2a 	bl	80009fc <MCP2515_SetConfigMode>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <CANSPI_Initialize+0xb2>
    return -2;
 80005b4:	f06f 0301 	mvn.w	r3, #1
 80005b8:	e055      	b.n	8000666 <CANSPI_Initialize+0x15e>

  /* Setting Filter & Mask Values */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	461a      	mov	r2, r3
 80005be:	2123      	movs	r1, #35	; 0x23
 80005c0:	2020      	movs	r0, #32
 80005c2:	f000 fac5 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005c6:	463b      	mov	r3, r7
 80005c8:	461a      	mov	r2, r3
 80005ca:	2127      	movs	r1, #39	; 0x27
 80005cc:	2024      	movs	r0, #36	; 0x24
 80005ce:	f000 fabf 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	461a      	mov	r2, r3
 80005d8:	2103      	movs	r1, #3
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fab8 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	461a      	mov	r2, r3
 80005e6:	2107      	movs	r1, #7
 80005e8:	2004      	movs	r0, #4
 80005ea:	f000 fab1 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	461a      	mov	r2, r3
 80005f4:	210b      	movs	r1, #11
 80005f6:	2008      	movs	r0, #8
 80005f8:	f000 faaa 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	461a      	mov	r2, r3
 8000602:	2113      	movs	r1, #19
 8000604:	2010      	movs	r0, #16
 8000606:	f000 faa3 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	461a      	mov	r2, r3
 8000610:	2117      	movs	r1, #23
 8000612:	2014      	movs	r0, #20
 8000614:	f000 fa9c 	bl	8000b50 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	461a      	mov	r2, r3
 800061e:	211b      	movs	r1, #27
 8000620:	2018      	movs	r0, #24
 8000622:	f000 fa95 	bl	8000b50 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000626:	2104      	movs	r1, #4
 8000628:	2060      	movs	r0, #96	; 0x60
 800062a:	f000 fa6b 	bl	8000b04 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800062e:	2101      	movs	r1, #1
 8000630:	2070      	movs	r0, #112	; 0x70
 8000632:	f000 fa67 	bl	8000b04 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000636:	2100      	movs	r1, #0
 8000638:	202a      	movs	r0, #42	; 0x2a
 800063a:	f000 fa63 	bl	8000b04 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800063e:	21e5      	movs	r1, #229	; 0xe5
 8000640:	2029      	movs	r0, #41	; 0x29
 8000642:	f000 fa5f 	bl	8000b04 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000646:	2183      	movs	r1, #131	; 0x83
 8000648:	2028      	movs	r0, #40	; 0x28
 800064a:	f000 fa5b 	bl	8000b04 <MCP2515_WriteByte>

  /* Set to Normal mode */
  if(!MCP2515_SetNormalMode())
 800064e:	f000 f9f3 	bl	8000a38 <MCP2515_SetNormalMode>
 8000652:	4603      	mov	r3, r0
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <CANSPI_Initialize+0x15c>
    return -3;
 800065e:	f06f 0302 	mvn.w	r3, #2
 8000662:	e000      	b.n	8000666 <CANSPI_Initialize+0x15e>

  return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <CANSPI_Transmit>:

/* Sending CAN Messages */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <CANSPI_Transmit+0xe8>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <CANSPI_Transmit+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <CANSPI_Transmit+0xe8>)
 800068a:	2200      	movs	r2, #0
 800068c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <CANSPI_Transmit+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000694:	f000 fad0 	bl	8000c38 <MCP2515_ReadStatus>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <CANSPI_Transmit+0xec>)
 800069e:	701a      	strb	r2, [r3, #0]

  /* Finds and sends a buffer that does not currently have a Transmission pending. */
  if (ctrlStatus.TXB0REQ != 1)
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <CANSPI_Transmit+0xec>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d115      	bne.n	80006da <CANSPI_Transmit+0x6a>
  {
    /* Convert to ID Type */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6858      	ldr	r0, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4a28      	ldr	r2, [pc, #160]	; (8000758 <CANSPI_Transmit+0xe8>)
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 f928 	bl	800090e <convertCANid2Reg>

    /* Data to be sent to the Tx Buffer Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7a1a      	ldrb	r2, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3309      	adds	r3, #9
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <CANSPI_Transmit+0xe8>)
 80006c8:	2040      	movs	r0, #64	; 0x40
 80006ca:	f000 fa6d 	bl	8000ba8 <MCP2515_LoadTxSequence>

    /* Data Transfer Request in Tx Buffer */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006ce:	2081      	movs	r0, #129	; 0x81
 80006d0:	f000 fa96 	bl	8000c00 <MCP2515_RequestToSend>

    returnValue = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e038      	b.n	800074c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <CANSPI_Transmit+0xec>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d115      	bne.n	8000714 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4a19      	ldr	r2, [pc, #100]	; (8000758 <CANSPI_Transmit+0xe8>)
 80006f2:	4619      	mov	r1, r3
 80006f4:	f000 f90b 	bl	800090e <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7a1a      	ldrb	r2, [r3, #8]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3309      	adds	r3, #9
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <CANSPI_Transmit+0xe8>)
 8000702:	2042      	movs	r0, #66	; 0x42
 8000704:	f000 fa50 	bl	8000ba8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000708:	2082      	movs	r0, #130	; 0x82
 800070a:	f000 fa79 	bl	8000c00 <MCP2515_RequestToSend>

    returnValue = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e01b      	b.n	800074c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <CANSPI_Transmit+0xec>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d114      	bne.n	800074c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6858      	ldr	r0, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <CANSPI_Transmit+0xe8>)
 800072c:	4619      	mov	r1, r3
 800072e:	f000 f8ee 	bl	800090e <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1a      	ldrb	r2, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3309      	adds	r3, #9
 800073a:	4907      	ldr	r1, [pc, #28]	; (8000758 <CANSPI_Transmit+0xe8>)
 800073c:	2044      	movs	r0, #68	; 0x44
 800073e:	f000 fa33 	bl	8000ba8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000742:	2084      	movs	r0, #132	; 0x84
 8000744:	f000 fa5c 	bl	8000c00 <MCP2515_RequestToSend>

    returnValue = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c
 800075c:	20000028 	.word	0x20000028

08000760 <CANSPI_Receive>:

/* Receiving CAN Messages */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800076c:	f000 fa82 	bl	8000c74 <MCP2515_GetRxStatus>
 8000770:	4603      	mov	r3, r0
 8000772:	733b      	strb	r3, [r7, #12]

  /* Check the buffer for received messages */
  if (rxStatus.rxBuffer != 0)
 8000774:	7b3b      	ldrb	r3, [r7, #12]
 8000776:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d066      	beq.n	800084e <CANSPI_Receive+0xee>
  {
    /* Determine which buffer the message is in and process it */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b40      	cmp	r3, #64	; 0x40
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2da      	uxtb	r2, r3
 8000792:	7b3b      	ldrb	r3, [r7, #12]
 8000794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2bc0      	cmp	r3, #192	; 0xc0
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	220d      	movs	r2, #13
 80007b2:	4619      	mov	r1, r3
 80007b4:	2090      	movs	r0, #144	; 0x90
 80007b6:	f000 f981 	bl	8000abc <MCP2515_ReadRxSequence>
 80007ba:	e00c      	b.n	80007d6 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b80      	cmp	r3, #128	; 0x80
 80007c6:	d106      	bne.n	80007d6 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	220d      	movs	r2, #13
 80007ce:	4619      	mov	r1, r3
 80007d0:	2094      	movs	r0, #148	; 0x94
 80007d2:	f000 f973 	bl	8000abc <MCP2515_ReadRxSequence>
    }

    /* Extended type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007d6:	7b3b      	ldrb	r3, [r7, #12]
 80007d8:	f003 0318 	and.w	r3, r3, #24
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b10      	cmp	r3, #16
 80007e0:	d10c      	bne.n	80007fc <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2202      	movs	r2, #2
 80007e6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007e8:	7cb8      	ldrb	r0, [r7, #18]
 80007ea:	7cf9      	ldrb	r1, [r7, #19]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	7c7b      	ldrb	r3, [r7, #17]
 80007f0:	f000 f832 	bl	8000858 <convertReg2ExtendedCANid>
 80007f4:	4602      	mov	r2, r0
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	e00b      	b.n	8000814 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000802:	7c3b      	ldrb	r3, [r7, #16]
 8000804:	7c7a      	ldrb	r2, [r7, #17]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f863 	bl	80008d4 <convertReg2StandardCANid>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000814:	7d3a      	ldrb	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800081a:	7d7a      	ldrb	r2, [r7, #21]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000820:	7dba      	ldrb	r2, [r7, #22]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800082c:	7e3a      	ldrb	r2, [r7, #24]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000832:	7e7a      	ldrb	r2, [r7, #25]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000838:	7eba      	ldrb	r2, [r7, #26]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800083e:	7efa      	ldrb	r2, [r7, #27]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000844:	7f3a      	ldrb	r2, [r7, #28]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800084e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Functions for converting register stored values to Extended ID types */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000858:	b490      	push	{r4, r7}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	4603      	mov	r3, r0
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	717b      	strb	r3, [r7, #5]
 8000872:	4613      	mov	r3, r2
 8000874:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800087e:	793b      	ldrb	r3, [r7, #4]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4413      	add	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4413      	add	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4413      	add	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008c8:	697b      	ldr	r3, [r7, #20]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc90      	pop	{r4, r7}
 80008d2:	4770      	bx	lr

080008d4 <convertReg2StandardCANid>:

/* Functions for converting register stored values to Standard ID types */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <convertCANid2Reg>:

/* Conversion Functions for Storing CAN IDs in Registers */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 800090e:	b480      	push	{r7}
 8000910:	b087      	sub	sp, #28
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	460b      	mov	r3, r1
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d12e      	bne.n	8000984 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f023 031f 	bic.w	r3, r3, #31
 800095a:	b2da      	uxtb	r2, r3
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	4413      	add	r3, r2
 8000960:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	3308      	adds	r3, #8
 8000966:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	f023 0314 	bic.w	r3, r3, #20
 800096e:	b2da      	uxtb	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000982:	e013      	b.n	80009ac <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	015b      	lsls	r3, r3, #5
 8000994:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	701a      	strb	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* Initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MCP2515_Initialize+0x3c>)
 80009c6:	f000 fefb 	bl	80017c0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80009ca:	230a      	movs	r3, #10
 80009cc:	71fb      	strb	r3, [r7, #7]

  do {
    /* Check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MCP2515_Initialize+0x40>)
 80009d0:	f002 f93c 	bl	8002c4c <HAL_SPI_GetState>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d101      	bne.n	80009de <MCP2515_Initialize+0x26>
      return true;
 80009da:	2301      	movs	r3, #1
 80009dc:	e006      	b.n	80009ec <MCP2515_Initialize+0x34>

    loop--;
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f1      	bne.n	80009ce <MCP2515_Initialize+0x16>

  return false;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40020000 	.word	0x40020000
 80009f8:	20000030 	.word	0x20000030

080009fc <MCP2515_SetConfigMode>:

/* Change Setting Mode */
bool MCP2515_SetConfigMode(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration Setting Mode */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	200f      	movs	r0, #15
 8000a06:	f000 f87d 	bl	8000b04 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	71fb      	strb	r3, [r7, #7]

  do {
    /* Check Changing Setting Mode */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000a0e:	200e      	movs	r0, #14
 8000a10:	f000 f830 	bl	8000a74 <MCP2515_ReadByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000a1a:	2b80      	cmp	r3, #128	; 0x80
 8000a1c:	d101      	bne.n	8000a22 <MCP2515_SetConfigMode+0x26>
      return true;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e006      	b.n	8000a30 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1ef      	bne.n	8000a0e <MCP2515_SetConfigMode+0x12>

  return false;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <MCP2515_SetNormalMode>:

/* Change Normal Mode */
bool MCP2515_SetNormalMode(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal Mode Setting */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	200f      	movs	r0, #15
 8000a42:	f000 f85f 	bl	8000b04 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	71fb      	strb	r3, [r7, #7]

  do {
    /* Check Changing Setting Mode */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000a4a:	200e      	movs	r0, #14
 8000a4c:	f000 f812 	bl	8000a74 <MCP2515_ReadByte>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <MCP2515_SetNormalMode+0x26>
      return true;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e006      	b.n	8000a6c <MCP2515_SetNormalMode+0x34>

    loop--;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ef      	bne.n	8000a4a <MCP2515_SetNormalMode+0x12>

  return false;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* Read 1 byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MCP2515_ReadByte+0x44>)
 8000a86:	f000 fe9b 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f910 	bl	8000cb0 <SPI_Tx>
  SPI_Tx(address);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f90c 	bl	8000cb0 <SPI_Tx>
  retVal = SPI_Rx();
 8000a98:	f000 f930 	bl	8000cfc <SPI_Rx>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MCP2515_ReadByte+0x44>)
 8000aa8:	f000 fe8a 	bl	80017c0 <HAL_GPIO_WritePin>

  return retVal;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40020000 	.word	0x40020000

08000abc <MCP2515_ReadRxSequence>:

/* Read Sequential Bytes */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MCP2515_ReadRxSequence+0x44>)
 8000ad4:	f000 fe74 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f8e8 	bl	8000cb0 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6838      	ldr	r0, [r7, #0]
 8000ae6:	f000 f919 	bl	8000d1c <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MCP2515_ReadRxSequence+0x44>)
 8000af2:	f000 fe65 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020000 	.word	0x40020000

08000b04 <MCP2515_WriteByte>:

/* Write 1 byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MCP2515_WriteByte+0x48>)
 8000b1c:	f000 fe50 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f000 f8c5 	bl	8000cb0 <SPI_Tx>
  SPI_Tx(address);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8c1 	bl	8000cb0 <SPI_Tx>
  SPI_Tx(data);
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f8bd 	bl	8000cb0 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MCP2515_WriteByte+0x48>)
 8000b3e:	f000 fe3f 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020000 	.word	0x40020000

08000b50 <MCP2515_WriteByteSequence>:

/* Write Sequential Bytes */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <MCP2515_WriteByteSequence+0x54>)
 8000b68:	f000 fe2a 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f000 f89f 	bl	8000cb0 <SPI_Tx>
  SPI_Tx(startAddress);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f89b 	bl	8000cb0 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f000 f8a3 	bl	8000cd4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MCP2515_WriteByteSequence+0x54>)
 8000b96:	f000 fe13 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <MCP2515_LoadTxSequence>:

/* Write TxBuffer에 Sequential Bytes */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MCP2515_LoadTxSequence+0x54>)
 8000bc2:	f000 fdfd 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f871 	bl	8000cb0 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000bce:	2104      	movs	r1, #4
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f000 f87f 	bl	8000cd4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f869 	bl	8000cb0 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f876 	bl	8000cd4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <MCP2515_LoadTxSequence+0x54>)
 8000bf0:	f000 fde6 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020000 	.word	0x40020000

08000c00 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* Send TxBuffer using RTS command */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MCP2515_RequestToSend+0x34>)
 8000c12:	f000 fdd5 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f849 	bl	8000cb0 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MCP2515_RequestToSend+0x34>)
 8000c26:	f000 fdcb 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000

08000c38 <MCP2515_ReadStatus>:

/* Check MCP2515 Status */
uint8_t MCP2515_ReadStatus(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <MCP2515_ReadStatus+0x38>)
 8000c46:	f000 fdbb 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000c4a:	20a0      	movs	r0, #160	; 0xa0
 8000c4c:	f000 f830 	bl	8000cb0 <SPI_Tx>
  retVal = SPI_Rx();
 8000c50:	f000 f854 	bl	8000cfc <SPI_Rx>
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MCP2515_ReadStatus+0x38>)
 8000c60:	f000 fdae 	bl	80017c0 <HAL_GPIO_WritePin>

  return retVal;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020000 	.word	0x40020000

08000c74 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus Check Resistor */
uint8_t MCP2515_GetRxStatus(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <MCP2515_GetRxStatus+0x38>)
 8000c82:	f000 fd9d 	bl	80017c0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000c86:	20b0      	movs	r0, #176	; 0xb0
 8000c88:	f000 f812 	bl	8000cb0 <SPI_Tx>
  retVal = SPI_Rx();
 8000c8c:	f000 f836 	bl	8000cfc <SPI_Rx>
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <MCP2515_GetRxStatus+0x38>)
 8000c9c:	f000 fd90 	bl	80017c0 <HAL_GPIO_WritePin>

  return retVal;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020000 	.word	0x40020000

08000cb0 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper Function */
static void SPI_Tx(uint8_t data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000cba:	1df9      	adds	r1, r7, #7
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <SPI_Tx+0x20>)
 8000cc2:	f001 fbd4 	bl	800246e <HAL_SPI_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000030 	.word	0x20000030

08000cd4 <SPI_TxBuffer>:

/* SPI Tx Wrapper Function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <SPI_TxBuffer+0x24>)
 8000cea:	f001 fbc0 	bl	800246e <HAL_SPI_Transmit>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000030 	.word	0x20000030

08000cfc <SPI_Rx>:

/* SPI Rx Wrapper Function */
static uint8_t SPI_Rx(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000d02:	1df9      	adds	r1, r7, #7
 8000d04:	230a      	movs	r3, #10
 8000d06:	2201      	movs	r2, #1
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <SPI_Rx+0x1c>)
 8000d0a:	f001 fcec 	bl	80026e6 <HAL_SPI_Receive>
  return retVal;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000030 	.word	0x20000030

08000d1c <SPI_RxBuffer>:

/* SPI Rx Wrapper Function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <SPI_RxBuffer+0x24>)
 8000d32:	f001 fcd8 	bl	80026e6 <HAL_SPI_Receive>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000030 	.word	0x20000030

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 fa29 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f861 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 f8ff 	bl	8000f54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d56:	f000 f8c7 	bl	8000ee8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d60:	4829      	ldr	r0, [pc, #164]	; (8000e08 <main+0xc4>)
 8000d62:	f000 fd2d 	bl	80017c0 <HAL_GPIO_WritePin>

  int ret;
  ret = CANSPI_Initialize();
 8000d66:	f7ff fbcf 	bl	8000508 <CANSPI_Initialize>
 8000d6a:	6078      	str	r0, [r7, #4]
  if(ret < 0){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da06      	bge.n	8000d80 <main+0x3c>
  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	4823      	ldr	r0, [pc, #140]	; (8000e08 <main+0xc4>)
 8000d7a:	f000 fd21 	bl	80017c0 <HAL_GPIO_WritePin>
  	  while(1){}
 8000d7e:	e7fe      	b.n	8000d7e <main+0x3a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if(CANSPI_Receive(&rxMessage)){
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <main+0xc8>)
 8000d82:	f7ff fced 	bl	8000760 <CANSPI_Receive>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f9      	beq.n	8000d80 <main+0x3c>
	  if(rxMessage.frame.id == 0x36){
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <main+0xc8>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b36      	cmp	r3, #54	; 0x36
 8000d92:	d110      	bne.n	8000db6 <main+0x72>
		  if(rxMessage.frame.data0 == 1){
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <main+0xc8>)
 8000d96:	7a5b      	ldrb	r3, [r3, #9]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d106      	bne.n	8000daa <main+0x66>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da2:	4819      	ldr	r0, [pc, #100]	; (8000e08 <main+0xc4>)
 8000da4:	f000 fd0c 	bl	80017c0 <HAL_GPIO_WritePin>
 8000da8:	e005      	b.n	8000db6 <main+0x72>
		  }else{
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <main+0xc4>)
 8000db2:	f000 fd05 	bl	80017c0 <HAL_GPIO_WritePin>
		  }
	  }

	  	HAL_Delay(100);
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f000 fa64 	bl	8001284 <HAL_Delay>
		txMessage.frame.idType = rxMessage.frame.idType;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <main+0xc8>)
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <main+0xcc>)
 8000dc2:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = 0x0A;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <main+0xcc>)
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <main+0xcc>)
 8000dcc:	2208      	movs	r2, #8
 8000dce:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 0;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <main+0xcc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 1;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <main+0xcc>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 2;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <main+0xcc>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 3;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <main+0xcc>)
 8000de4:	2203      	movs	r2, #3
 8000de6:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 4;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <main+0xcc>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 5;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0xcc>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 6;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <main+0xcc>)
 8000df6:	2206      	movs	r2, #6
 8000df8:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 7;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <main+0xcc>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <main+0xcc>)
 8000e02:	f7ff fc35 	bl	8000670 <CANSPI_Transmit>
  if(CANSPI_Receive(&rxMessage)){
 8000e06:	e7bb      	b.n	8000d80 <main+0x3c>
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	2000009c 	.word	0x2000009c
 8000e10:	20000088 	.word	0x20000088

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2234      	movs	r2, #52	; 0x34
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 f874 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e8c:	2354      	movs	r3, #84	; 0x54
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 ffbf 	bl	8001e20 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ea8:	f000 f89e 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fc93 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ed4:	f000 f888 	bl	8000fe8 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f001 fa0f 	bl	800235c <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 f850 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000030 	.word	0x20000030
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000faa:	f000 fc09 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000fb6:	f000 fc03 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_Pin;
 8000fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000fd4:	f000 fa60 	bl	8001498 <HAL_GPIO_Init>

}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001032:	2007      	movs	r0, #7
 8001034:	f000 f9fc 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_SPI_MspInit+0x84>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12b      	bne.n	80010be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_SPI_MspInit+0x88>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_SPI_MspInit+0x88>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800109e:	23e0      	movs	r3, #224	; 0xe0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ae:	2305      	movs	r3, #5
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 80010ba:	f000 f9ed 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40013000 	.word	0x40013000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f890 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001176:	f7ff ffd7 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f001 fea5 	bl	8002ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fde1 	bl	8000d44 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001190:	08002f58 	.word	0x08002f58
  ldr r2, =_sbss
 8001194:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001198:	200000b4 	.word	0x200000b4

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_Init+0x40>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_Init+0x40>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x40>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f931 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff ff0e 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f93b 	bl	800147e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f911 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	200000b0 	.word	0x200000b0

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200000b0 	.word	0x200000b0

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff47 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5c 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb0 	bl	80013ec <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e165      	b.n	8001780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8154 	bne.w	800177a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80ae 	beq.w	800177a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a5c      	ldr	r2, [pc, #368]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_GPIO_Init+0x304>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <HAL_GPIO_Init+0x308>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x21a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4e      	ldr	r2, [pc, #312]	; (80017a4 <HAL_GPIO_Init+0x30c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x216>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4d      	ldr	r2, [pc, #308]	; (80017a8 <HAL_GPIO_Init+0x310>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x212>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4c      	ldr	r2, [pc, #304]	; (80017ac <HAL_GPIO_Init+0x314>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x20e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4b      	ldr	r2, [pc, #300]	; (80017b0 <HAL_GPIO_Init+0x318>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x20a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x31c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x206>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x320>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x202>
 8001696:	2306      	movs	r3, #6
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 800169a:	2307      	movs	r3, #7
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x21c>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x304>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_GPIO_Init+0x324>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a31      	ldr	r2, [pc, #196]	; (80017bc <HAL_GPIO_Init+0x324>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_GPIO_Init+0x324>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_GPIO_Init+0x324>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ae96 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cc      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d90c      	bls.n	8001830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d044      	beq.n	8001914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e067      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 0203 	bic.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fcc2 	bl	800126c <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff fcbe 	bl	800126c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e04f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 020c 	and.w	r2, r3, #12
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1eb      	bne.n	80018ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc22 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08002f38 	.word	0x08002f38
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b0ae      	sub	sp, #184	; 0xb8
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e6:	4bcb      	ldr	r3, [pc, #812]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	f200 8206 	bhi.w	8001e00 <HAL_RCC_GetSysClockFreq+0x440>
 80019f4:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a31 	.word	0x08001a31
 8001a00:	08001e01 	.word	0x08001e01
 8001a04:	08001e01 	.word	0x08001e01
 8001a08:	08001e01 	.word	0x08001e01
 8001a0c:	08001a39 	.word	0x08001a39
 8001a10:	08001e01 	.word	0x08001e01
 8001a14:	08001e01 	.word	0x08001e01
 8001a18:	08001e01 	.word	0x08001e01
 8001a1c:	08001a41 	.word	0x08001a41
 8001a20:	08001e01 	.word	0x08001e01
 8001a24:	08001e01 	.word	0x08001e01
 8001a28:	08001e01 	.word	0x08001e01
 8001a2c:	08001c31 	.word	0x08001c31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4bb9      	ldr	r3, [pc, #740]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a36:	e1e7      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4bb8      	ldr	r3, [pc, #736]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a3e:	e1e3      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4bb4      	ldr	r3, [pc, #720]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4c:	4bb1      	ldr	r3, [pc, #708]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d071      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4bae      	ldr	r3, [pc, #696]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a7e:	4622      	mov	r2, r4
 8001a80:	462b      	mov	r3, r5
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	0159      	lsls	r1, r3, #5
 8001a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a90:	0150      	lsls	r0, r2, #5
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4621      	mov	r1, r4
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	6439      	str	r1, [r7, #64]	; 0x40
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aba:	4641      	mov	r1, r8
 8001abc:	018a      	lsls	r2, r1, #6
 8001abe:	4641      	mov	r1, r8
 8001ac0:	1a51      	subs	r1, r2, r1
 8001ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ad8:	4649      	mov	r1, r9
 8001ada:	00cb      	lsls	r3, r1, #3
 8001adc:	4641      	mov	r1, r8
 8001ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	00ca      	lsls	r2, r1, #3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	4622      	mov	r2, r4
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
 8001af2:	462b      	mov	r3, r5
 8001af4:	460a      	mov	r2, r1
 8001af6:	eb42 0303 	adc.w	r3, r2, r3
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b08:	4629      	mov	r1, r5
 8001b0a:	024b      	lsls	r3, r1, #9
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b12:	4621      	mov	r1, r4
 8001b14:	024a      	lsls	r2, r1, #9
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b2c:	f7fe fb6a 	bl	8000204 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b3a:	e067      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b48:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b56:	2300      	movs	r3, #0
 8001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b90:	4649      	mov	r1, r9
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4641      	mov	r1, r8
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bbe:	4692      	mov	sl, r2
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb1a 0303 	adds.w	r3, sl, r3
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8001bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8001bfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bfe:	f7fe fb01 	bl	8000204 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4613      	mov	r3, r2
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c2e:	e0eb      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c30:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d06b      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	2200      	movs	r2, #0
 8001c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c64:	4622      	mov	r2, r4
 8001c66:	462b      	mov	r3, r5
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	1a51      	subs	r1, r2, r1
 8001c80:	61b9      	str	r1, [r7, #24]
 8001c82:	4629      	mov	r1, r5
 8001c84:	eb63 0301 	sbc.w	r3, r3, r1
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c96:	4659      	mov	r1, fp
 8001c98:	018b      	lsls	r3, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	018a      	lsls	r2, r1, #6
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	ebb2 0801 	subs.w	r8, r2, r1
 8001caa:	4659      	mov	r1, fp
 8001cac:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc4:	4690      	mov	r8, r2
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	eb18 0303 	adds.w	r3, r8, r3
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	eb49 0303 	adc.w	r3, r9, r3
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	024b      	lsls	r3, r1, #9
 8001ce8:	4621      	mov	r1, r4
 8001cea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cee:	4621      	mov	r1, r4
 8001cf0:	024a      	lsls	r2, r1, #9
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cfe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d04:	f7fe fa7e 	bl	8000204 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d12:	e065      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x420>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d30:	653b      	str	r3, [r7, #80]	; 0x50
 8001d32:	2300      	movs	r3, #0
 8001d34:	657b      	str	r3, [r7, #84]	; 0x54
 8001d36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d3a:	4642      	mov	r2, r8
 8001d3c:	464b      	mov	r3, r9
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4c:	0150      	lsls	r0, r2, #5
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4641      	mov	r1, r8
 8001d54:	1a51      	subs	r1, r2, r1
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	4649      	mov	r1, r9
 8001d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	4651      	mov	r1, sl
 8001d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d76:	4651      	mov	r1, sl
 8001d78:	018a      	lsls	r2, r1, #6
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	1a54      	subs	r4, r2, r1
 8001d7e:	4659      	mov	r1, fp
 8001d80:	eb63 0501 	sbc.w	r5, r3, r1
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	00eb      	lsls	r3, r5, #3
 8001d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d92:	00e2      	lsls	r2, r4, #3
 8001d94:	4614      	mov	r4, r2
 8001d96:	461d      	mov	r5, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	18e3      	adds	r3, r4, r3
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	464b      	mov	r3, r9
 8001da0:	eb45 0303 	adc.w	r3, r5, r3
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db2:	4629      	mov	r1, r5
 8001db4:	028b      	lsls	r3, r1, #10
 8001db6:	4621      	mov	r1, r4
 8001db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	028a      	lsls	r2, r1, #10
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dc8:	2200      	movs	r2, #0
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dcc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dd2:	f7fe fa17 	bl	8000204 <__aeabi_uldivmod>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0f1b      	lsrs	r3, r3, #28
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dfe:	e003      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	37b8      	adds	r7, #184	; 0xb8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400

08001e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e28d      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8083 	beq.w	8001f46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e40:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d019      	beq.n	8001e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e4c:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d112      	bne.n	8001e98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	4b84      	ldr	r3, [pc, #528]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x124>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d157      	bne.n	8001f44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e25a      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x90>
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7b      	ldr	r2, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xcc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xb4>
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a72      	ldr	r2, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xcc>
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6b      	ldr	r2, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9ba 	bl	800126c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff f9b6 	bl	800126c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e21f      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b61      	ldr	r3, [pc, #388]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xdc>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f9a6 	bl	800126c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f9a2 	bl	800126c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e20b      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x104>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06f      	beq.n	8002032 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d017      	beq.n	8001f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f5e:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x186>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1d3      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f94f 	bl	800126c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f94b 	bl	800126c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1b4      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x278>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f92e 	bl	800126c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f92a 	bl	800126c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e193      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d036      	beq.n	80020ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f90e 	bl	800126c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff f90a 	bl	800126c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e173      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x234>
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff f8f7 	bl	800126c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e00e      	b.n	80020a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff f8f3 	bl	800126c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d907      	bls.n	80020a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e15c      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
 8002094:	40023800 	.word	0x40023800
 8002098:	42470000 	.word	0x42470000
 800209c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ea      	bne.n	8002082 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8097 	beq.w	80021e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b83      	ldr	r3, [pc, #524]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b7f      	ldr	r3, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a7e      	ldr	r2, [pc, #504]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a75      	ldr	r2, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f8b3 	bl	800126c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff f8af 	bl	800126c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e118      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x31e>
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x358>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x340>
 8002146:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x358>
 8002160:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a59      	ldr	r2, [pc, #356]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	4b57      	ldr	r3, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a56      	ldr	r2, [pc, #344]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff f874 	bl	800126c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff f870 	bl	800126c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0d7      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <HAL_RCC_OscConfig+0x368>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f85e 	bl	800126c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff f85a 	bl	800126c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0c1      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ad 	beq.w	800234c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d060      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d145      	bne.n	8002292 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f82e 	bl	800126c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f82a 	bl	800126c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e093      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	071b      	lsls	r3, r3, #28
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe ffff 	bl	800126c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fffb 	bl	800126c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e064      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x452>
 8002290:	e05c      	b.n	800234c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe ffe8 	bl	800126c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe ffe4 	bl	800126c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04d      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x480>
 80022be:	e045      	b.n	800234c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e040      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_RCC_OscConfig+0x538>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d030      	beq.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d129      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d122      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002310:	4293      	cmp	r3, r2
 8002312:	d119      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d10f      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07b      	b.n	8002466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237e:	d009      	beq.n	8002394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
 8002386:	e005      	b.n	8002394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fe48 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0104 	and.w	r1, r3, #4
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f003 0210 	and.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b088      	sub	sp, #32
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_SPI_Transmit+0x22>
 800248c:	2302      	movs	r3, #2
 800248e:	e126      	b.n	80026de <HAL_SPI_Transmit+0x270>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002498:	f7fe fee8 	bl	800126c <HAL_GetTick>
 800249c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d002      	beq.n	80024b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024b2:	e10b      	b.n	80026cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Transmit+0x52>
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024c4:	e102      	b.n	80026cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250c:	d10f      	bne.n	800252e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800252c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d007      	beq.n	800254c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002554:	d14b      	bne.n	80025ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_Transmit+0xf6>
 800255e:	8afb      	ldrh	r3, [r7, #22]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d13e      	bne.n	80025e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002588:	e02b      	b.n	80025e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d112      	bne.n	80025be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80025bc:	e011      	b.n	80025e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025be:	f7fe fe55 	bl	800126c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d803      	bhi.n	80025d6 <HAL_SPI_Transmit+0x168>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d102      	bne.n	80025dc <HAL_SPI_Transmit+0x16e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025e0:	e074      	b.n	80026cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ce      	bne.n	800258a <HAL_SPI_Transmit+0x11c>
 80025ec:	e04c      	b.n	8002688 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_Transmit+0x18e>
 80025f6:	8afb      	ldrh	r3, [r7, #22]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d140      	bne.n	800267e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002622:	e02c      	b.n	800267e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d113      	bne.n	800265a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	86da      	strh	r2, [r3, #54]	; 0x36
 8002658:	e011      	b.n	800267e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800265a:	f7fe fe07 	bl	800126c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d803      	bhi.n	8002672 <HAL_SPI_Transmit+0x204>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d102      	bne.n	8002678 <HAL_SPI_Transmit+0x20a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800267c:	e026      	b.n	80026cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1cd      	bne.n	8002624 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fbd9 	bl	8002e44 <SPI_EndRxTxTransaction>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
 80026c8:	e000      	b.n	80026cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80026ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af02      	add	r7, sp, #8
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002702:	d112      	bne.n	800272a <HAL_SPI_Receive+0x44>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10e      	bne.n	800272a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2204      	movs	r2, #4
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f8f1 	bl	8002908 <HAL_SPI_TransmitReceive>
 8002726:	4603      	mov	r3, r0
 8002728:	e0ea      	b.n	8002900 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_SPI_Receive+0x52>
 8002734:	2302      	movs	r3, #2
 8002736:	e0e3      	b.n	8002900 <HAL_SPI_Receive+0x21a>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002740:	f7fe fd94 	bl	800126c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d002      	beq.n	8002758 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002756:	e0ca      	b.n	80028ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_SPI_Receive+0x7e>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002768:	e0c1      	b.n	80028ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2204      	movs	r2, #4
 800276e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	d10f      	bne.n	80027d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d007      	beq.n	80027f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d162      	bne.n	80028be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027f8:	e02e      	b.n	8002858 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d115      	bne.n	8002834 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f103 020c 	add.w	r2, r3, #12
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002832:	e011      	b.n	8002858 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002834:	f7fe fd1a 	bl	800126c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d803      	bhi.n	800284c <HAL_SPI_Receive+0x166>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d102      	bne.n	8002852 <HAL_SPI_Receive+0x16c>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002856:	e04a      	b.n	80028ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1cb      	bne.n	80027fa <HAL_SPI_Receive+0x114>
 8002862:	e031      	b.n	80028c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d113      	bne.n	800289a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	b292      	uxth	r2, r2
 800287e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002898:	e011      	b.n	80028be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289a:	f7fe fce7 	bl	800126c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d803      	bhi.n	80028b2 <HAL_SPI_Receive+0x1cc>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d102      	bne.n	80028b8 <HAL_SPI_Receive+0x1d2>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028bc:	e017      	b.n	80028ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1cd      	bne.n	8002864 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	6839      	ldr	r1, [r7, #0]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fa53 	bl	8002d78 <SPI_EndRxTransaction>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
 80028ea:	e000      	b.n	80028ee <HAL_SPI_Receive+0x208>
  }

error :
 80028ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002916:	2301      	movs	r3, #1
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_SPI_TransmitReceive+0x26>
 800292a:	2302      	movs	r3, #2
 800292c:	e18a      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x33c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002936:	f7fe fc99 	bl	800126c <HAL_GetTick>
 800293a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00f      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x70>
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800295e:	d107      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x68>
 8002968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800296c:	2b04      	cmp	r3, #4
 800296e:	d003      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002970:	2302      	movs	r3, #2
 8002972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002976:	e15b      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_SPI_TransmitReceive+0x82>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_TransmitReceive+0x82>
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002990:	e14e      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b04      	cmp	r3, #4
 800299c:	d003      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2205      	movs	r2, #5
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d007      	beq.n	80029fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a02:	d178      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x10a>
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d166      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	1c9a      	adds	r2, r3, #2
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a36:	e053      	b.n	8002ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d11b      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x176>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x176>
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d113      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d119      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x1b8>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d014      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002abc:	2301      	movs	r3, #1
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ac0:	f7fe fbd4 	bl	800126c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d807      	bhi.n	8002ae0 <HAL_SPI_TransmitReceive+0x1d8>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d003      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ade:	e0a7      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1a6      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x130>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1a1      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x130>
 8002af4:	e07c      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x1fc>
 8002afe:	8b7b      	ldrh	r3, [r7, #26]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d16b      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2a:	e057      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d11c      	bne.n	8002b74 <HAL_SPI_TransmitReceive+0x26c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x26c>
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d114      	bne.n	8002b74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d119      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x2ae>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d014      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bb6:	f7fe fb59 	bl	800126c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d803      	bhi.n	8002bce <HAL_SPI_TransmitReceive+0x2c6>
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x2cc>
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bda:	e029      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1a2      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x224>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d19d      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f925 	bl	8002e44 <SPI_EndRxTxTransaction>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c0c:	e010      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	e000      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3730      	adds	r7, #48	; 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c5a:	b2db      	uxtb	r3, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c78:	f7fe faf8 	bl	800126c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c88:	f7fe faf0 	bl	800126c <HAL_GetTick>
 8002c8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	015b      	lsls	r3, r3, #5
 8002c94:	0d1b      	lsrs	r3, r3, #20
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9e:	e054      	b.n	8002d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d050      	beq.n	8002d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ca8:	f7fe fae0 	bl	800126c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d902      	bls.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d13d      	bne.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ccc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd6:	d111      	bne.n	8002cfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce0:	d004      	beq.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d107      	bne.n	8002cfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d04:	d10f      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e017      	b.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d19b      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8c:	d111      	bne.n	8002db2 <SPI_EndRxTransaction+0x3a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d96:	d004      	beq.n	8002da2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	d107      	bne.n	8002db2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d12a      	bne.n	8002e12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d012      	beq.n	8002dec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff49 	bl	8002c68 <SPI_WaitFlagStateUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02d      	beq.n	8002e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e026      	b.n	8002e3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2101      	movs	r1, #1
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ff36 	bl	8002c68 <SPI_WaitFlagStateUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e013      	b.n	8002e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff ff23 	bl	8002c68 <SPI_WaitFlagStateUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e000      	b.n	8002e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <SPI_EndRxTxTransaction+0x7c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <SPI_EndRxTxTransaction+0x80>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0d5b      	lsrs	r3, r3, #21
 8002e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6e:	d112      	bne.n	8002e96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fef4 	bl	8002c68 <SPI_WaitFlagStateUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e00f      	b.n	8002eb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d0f2      	beq.n	8002e96 <SPI_EndRxTxTransaction+0x52>
 8002eb0:	e000      	b.n	8002eb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002eb2:	bf00      	nop
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	165e9f81 	.word	0x165e9f81

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4d0d      	ldr	r5, [pc, #52]	; (8002f00 <__libc_init_array+0x38>)
 8002ecc:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <__libc_init_array+0x3c>)
 8002ece:	1b64      	subs	r4, r4, r5
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	4d0b      	ldr	r5, [pc, #44]	; (8002f08 <__libc_init_array+0x40>)
 8002eda:	4c0c      	ldr	r4, [pc, #48]	; (8002f0c <__libc_init_array+0x44>)
 8002edc:	f000 f820 	bl	8002f20 <_init>
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	42a6      	cmp	r6, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef0:	4798      	blx	r3
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efa:	4798      	blx	r3
 8002efc:	3601      	adds	r6, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	08002f50 	.word	0x08002f50
 8002f04:	08002f50 	.word	0x08002f50
 8002f08:	08002f50 	.word	0x08002f50
 8002f0c:	08002f54 	.word	0x08002f54

08002f10 <memset>:
 8002f10:	4402      	add	r2, r0
 8002f12:	4603      	mov	r3, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <_init>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr

08002f2c <_fini>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr
